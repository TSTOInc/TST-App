import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { Toaster } from "@/components/ui/sonner";
import { AppSidebar } from "@/components/app-sidebar";
import { ThemeProvider } from "@/components/theme-provider";
import { SiteHeader } from "@/components/site-header";
import { SidebarInset, SidebarProvider } from "@/components/ui/sidebar";

import { auth0 } from "@/lib/auth0";
import { redirect } from "next/navigation";
import { getToken } from "@/lib/getToken";
import { ArrowUpRightIcon, SearchIcon } from "lucide-react"
import { IconBuildingPlus, IconUserPlus, IconZoomQuestion } from "@tabler/icons-react";
import {
  Empty,
  EmptyContent,
  EmptyDescription,
  EmptyHeader,
  EmptyMedia,
  EmptyTitle,
} from "@/components/ui/empty"
import { Button } from "@/components/ui/button";
import { IconFolderCode } from "@tabler/icons-react";
import Link from "next/link";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "TST App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  // Fetch the user session
  const session = await auth0.getSession();
  // Redirect to login if no session
  if (!session) {
    return (
      <html lang="en" suppressHydrationWarning>
        <body
          className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        >
          <ThemeProvider
            attribute="class"
            enableSystem
            disableTransitionOnChange
          >
            <div className="min-h-screen flex flex-col">
              <Empty>
                <EmptyHeader>
                  <EmptyMedia variant="icon">
                    <IconZoomQuestion />
                  </EmptyMedia>
                  <EmptyTitle>401 - Not Authenticated</EmptyTitle>
                  <EmptyDescription>
                    You are not authenticated. Please log in.
                  </EmptyDescription>
                </EmptyHeader>
                <EmptyContent>
                  <div className="flex gap-2">
                    <Button variant="outline" asChild>
                      <Link href="/auth/login?screen_hint=signup">Sign up</Link>
                    </Button>
                    <Button asChild>
                      <Link href="/auth/login">Log in</Link>
                    </Button>

                  </div>
                </EmptyContent>
                <EmptyDescription>
                  Need help? <a href="#">Contact support</a>
                </EmptyDescription>
              </Empty>
            </div>
          </ThemeProvider>
        </body>
      </html>
    )
  }
  if (!session.user.org_id) {
    return (
      <html lang="en" suppressHydrationWarning>
        <body
          className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        >
          <ThemeProvider
            attribute="class"
            enableSystem
            disableTransitionOnChange
          >
            <div className="min-h-screen flex flex-col">
              <Empty>
                <EmptyHeader>
                  <EmptyMedia variant="icon">
                    <IconBuildingPlus className="w-12 h-12 text-muted-foreground" />
                  </EmptyMedia>
                  <EmptyTitle>401 - No Organization Found</EmptyTitle>
                  <EmptyDescription>
                    Youâ€™re not currently part of any organization.
                    You can create a new one or join an existing team by invitation.
                  </EmptyDescription>
                </EmptyHeader>

                <EmptyContent>
                  <div className="flex flex-col sm:flex-row gap-3 justify-center">
                    <Button asChild>
                      <Link href="/organization/new">
                        <IconBuildingPlus className="mr-2 h-4 w-4" />
                        Create Organization
                      </Link>
                    </Button>
                    <Button variant="outline" asChild>
                      <Link href="/auth/login?screen_hint=signup">
                        <IconUserPlus className="mr-2 h-4 w-4" />
                        Join with Invite
                      </Link>
                    </Button>
                  </div>
                </EmptyContent>
                <EmptyDescription>
                   {" "}
                  <Link
                    href="/auth/logout"
                    className="underline underline-offset-4 text-primary hover:text-primary/80"
                  >
                    Log out
                  </Link>
                </EmptyDescription>
                <EmptyDescription>
                  Need help?{" "}
                  <Link
                    href="/support"
                    className="underline underline-offset-4 text-primary hover:text-primary/80"
                  >
                    Contact support
                  </Link>
                </EmptyDescription>
              </Empty>
            </div>
          </ThemeProvider>
        </body>
      </html>
    )
  }
  const user = session.user
  const orgId = user.org_id
  const token = await getToken();

  const res = await fetch(`https://dev-xmw2ajtl2wpc1npq.us.auth0.com/api/v2/organizations/${orgId}`, {
    headers: {
      Authorization: `Bearer ${token}`,
    },
    cache: "no-store",
  })

  const organization = await res.json()

  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <ThemeProvider
          attribute="class"
          enableSystem
          disableTransitionOnChange
        >
          <SidebarProvider

            style={
              {
                "--sidebar-width": "calc(var(--spacing) * 72)",
                "--header-height": "calc(var(--spacing) * 12)",
              } as React.CSSProperties
            }
          >
            <AppSidebar
              variant="inset"
              user={user}
              organization={{
                id: organization.id,
                name: organization.display_name || organization.name,
              }}
            />
            <SidebarInset>
              <SiteHeader />
              {children}
              <Toaster richColors position="top-center" />
            </SidebarInset>
          </SidebarProvider>
        </ThemeProvider>
      </body>
    </html>
  );
}
